import WasabeeLink from "./link";
import WasabeePortal from "./portal";
import WasabeeMarker from "./marker";
import WasabeeZone from "./zone";
import Evented from "./evented";
import type Task from "./task";
export declare type KeyOnHand = {
    portalId: string;
    gid: string;
    capsule: string;
    onhand: number;
};
export declare type OpPermItem = {
    role: "read" | "write" | "assignonly";
    teamid: string;
    zone: number;
};
interface IOperation {
    ID: OpID;
    name: string;
    creator: string | GoogleID;
    opportals: WasabeePortal[];
    anchors: string[];
    links: WasabeeLink[];
    markers: WasabeeMarker[];
    color: string;
    comment: string;
    zones: WasabeeZone[];
    referencetime: string;
}
export interface IServerOp extends IOperation {
    creator: GoogleID;
    teamlist: OpPermItem[];
    keysonhand: KeyOnHand[];
    lasteditid: string;
    fetched: string;
    modified: string;
}
export interface ILocalOp extends IOperation {
    teamlist: OpPermItem[];
    keysonhand: KeyOnHand[];
    lasteditid: string;
    fetched: string;
    fetchedOp: string;
    server: string;
    localchanged: boolean;
    remoteChanged: boolean;
    background: boolean;
    stored: number;
}
export default class WasabeeOp extends Evented implements IOperation {
    ID: string;
    name: string;
    creator: string;
    anchors: Array<string>;
    links: Array<WasabeeLink>;
    markers: Array<WasabeeMarker>;
    color: string;
    comment: string;
    teamlist: Array<OpPermItem>;
    fetched: string;
    stored: number;
    localchanged: boolean;
    blockers: Array<WasabeeLink>;
    keysonhand: Array<KeyOnHand>;
    zones: Array<WasabeeZone>;
    referencetime: string;
    lasteditid: string;
    remoteChanged: boolean;
    server: string;
    fetchedOp: string;
    background: boolean;
    _idToOpportals: Map<string, WasabeePortal>;
    _coordsToOpportals: Map<string, WasabeePortal>;
    _dirtyCoordsTable: boolean;
    _batchmode: boolean;
    constructor(obj: any);
    static load(opID: OpID): Promise<WasabeeOp>;
    static delete(opID: OpID): Promise<void>;
    static migrate(opID: OpID): Promise<void>;
    store(): Promise<void>;
    toJSON(): any;
    toExport(): string;
    getFetchedOp(): WasabeeOp;
    get opportals(): WasabeePortal[];
    buildCoordsLookupTable(): void;
    getColor(): string;
    containsPortal(portal: WasabeePortal): boolean;
    getPortalByLatLng(lat: string, lng: string): WasabeePortal;
    containsLinkFromTo(fromPortalId: PortalID, toPortalId: PortalID): boolean;
    containsLink(link: WasabeeLink): boolean;
    containsMarker(portal: WasabeePortal, markerType: string): boolean;
    containsMarkerByID(portalID: PortalID, markerType: string): boolean;
    getLinkByPortalIDs(portalId1: PortalID, portalId2: PortalID): WasabeeLink;
    getLink(portal1: WasabeePortal, portal2: WasabeePortal): WasabeeLink;
    getLinkById(linkID: LinkID): WasabeeLink;
    getLinkListFromPortal(portal: WasabeePortal): WasabeeLink[];
    getPortal(portalID: PortalID): WasabeePortal;
    getMarker(markerID: MarkerID): WasabeeMarker;
    removeAnchor(portalId: PortalID): void;
    removeMarkerByID(markerID: MarkerID): void;
    removeMarker(marker: WasabeeMarker): void;
    setMarkerComment(marker: WasabeeMarker, comment: string): void;
    setMarkerState(markerID: MarkerID, state: Task["state"]): void;
    setLinkComment(link: WasabeeLink, comment: string): void;
    setLinkState(linkID: LinkID, state: Task["state"]): void;
    setLinkColor(linkID: LinkID, color: string): void;
    setLinkOrder(linkID: LinkID, order: string | number): void;
    setMarkerOrder(markerID: MarkerID, order: string | number): void;
    setPortalComment(portal: WasabeePortal, comment: string): void;
    setPortalHardness(portal: WasabeePortal, hardness: string): void;
    removeLinkByID(linkID: LinkID): void;
    removeLink(startPortal: PortalID, endPortal: PortalID): void;
    reverseLink(startPortalID: PortalID, endPortalID: PortalID): void;
    cleanAll(): void;
    cleanCaches(): void;
    cleanAnchorList(): void;
    cleanPortalList(): void;
    addPortal(portal: WasabeePortal): void;
    _addPortal(portal: WasabeePortal): boolean;
    updatePortal(portal: WasabeePortal): boolean;
    _updatePortal(portal: WasabeePortal): boolean;
    addLink(fromPortal: WasabeePortal, toPortal: WasabeePortal, options?: {
        description?: string;
        order?: number;
        color?: string;
        replace?: boolean;
    }): WasabeeLink;
    containsAnchor(portalId: string): boolean;
    addAnchor(portal: WasabeePortal): void;
    get fakedPortals(): WasabeePortal[];
    _swapPortal(originalPortal: WasabeePortal, newPortal: WasabeePortal): void;
    swapPortal(originalPortal: WasabeePortal, newPortal: WasabeePortal): void;
    addMarker(markerType: string, portal: WasabeePortal, options: any): boolean;
    assignMarker(id: MarkerID, gid: GoogleID): void;
    assignLink(id: LinkID, gid: GoogleID): void;
    clearAllItems(): void;
    clearAllLinks(): void;
    clearAllMarkers(): void;
    update(updateLocalchanged?: boolean): void;
    updateBlockers(): void;
    startBatchMode(): void;
    endBatchMode(): void;
    convertLinksToObjs(links: any[]): any[];
    convertMarkersToObjs(markers: any[]): any[];
    convertPortalsToObjs(portals: any[]): any[];
    convertZonesToObjs(zones: any[]): any[];
    get mbr(): import("leaflet").LatLngBounds;
    canWriteServer(): boolean;
    canWrite(): boolean;
    getPermission(): "read" | "write" | "assignonly";
    isOnCurrentServer(): boolean;
    isServerOp(): boolean;
    isOwnedOp(): boolean;
    get nextOrder(): number;
    keyOnHand(portalId: PortalID, gid: GoogleID, onhand: number, capsule: string): void;
    KeysOnHandForPortal(portalId: PortalID): number;
    KeysRequiredForPortal(portalId: PortalID): number;
    zoneName(zoneID: ZoneID): string | number;
    getZone(zoneID: ZoneID): WasabeeZone;
    setZone(thing: Task, zoneID: ZoneID): void;
    removeZone(zoneID: ZoneID): void;
    removeZonePoints(zoneID: ZoneID): void;
    renameZone(zoneID: ZoneID, name: string): void;
    addZone(): number;
    addZonePoint(zoneID: number, latlng: L.LatLng): void;
    changes(origin?: WasabeeOp): boolean;
    checkChanges(): boolean;
    mergeZones(op: WasabeeOp): number;
    determineZone(latlng: {
        lat: number;
        lng: number;
    }): number;
    getOrderInfo(): {
        fieldCount: number;
        emptyFieldLinks: [WasabeeLink, number][];
        emptyCount: number;
        linksFromInner: WasabeeLink[];
        coveredPortals: Map<string, WasabeeLink>;
    };
}
export {};
